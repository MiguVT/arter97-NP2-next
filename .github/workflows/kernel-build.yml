name: Auto Build Kernel with KernelSU Next

on:
  schedule:
    # Run every 30 minutes to check for new releases/tags
    - cron: '*/30 * * * *'
  workflow_dispatch:
    # Allow manual execution
    inputs:
      force_build:
        description: 'Force build even if no new versions'
        required: false
        default: false
        type: boolean

jobs:
  check-versions:
    runs-on: ubuntu-latest
    outputs:
      new-kernel-tag: ${{ steps.check.outputs.new-kernel-tag }}
      new-kernelsu-release: ${{ steps.check.outputs.new-kernelsu-release }}
      should-build: ${{ steps.check.outputs.should-build }}
      kernel-tag: ${{ steps.check.outputs.kernel-tag }}
      kernelsu-release: ${{ steps.check.outputs.kernelsu-release }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for new versions
        id: check
        run: |
          # Get latest tag from arter97 kernel
          LATEST_KERNEL_TAG=$(curl -s https://api.github.com/repos/arter97/android_kernel_nothing_sm8475/tags | jq -r '.[0].name')
          echo "Latest kernel tag: $LATEST_KERNEL_TAG"

          # Get latest release from KernelSU Next
          LATEST_KERNELSU_RELEASE=$(curl -s https://api.github.com/repos/KernelSU-Next/KernelSU-Next/releases/latest | jq -r '.tag_name')
          echo "Latest KernelSU release: $LATEST_KERNELSU_RELEASE"

          # Read previously processed versions
          LAST_KERNEL_TAG=""
          LAST_KERNELSU_RELEASE=""

          if [ -f "last_versions.txt" ]; then
            LAST_KERNEL_TAG=$(grep "KERNEL_TAG=" last_versions.txt | cut -d'=' -f2)
            LAST_KERNELSU_RELEASE=$(grep "KERNELSU_RELEASE=" last_versions.txt | cut -d'=' -f2)
          fi

          echo "Last processed kernel tag: $LAST_KERNEL_TAG"
          echo "Last processed KernelSU release: $LAST_KERNELSU_RELEASE"

          # Check for new versions
          NEW_KERNEL_TAG="false"
          NEW_KERNELSU_RELEASE="false"
          SHOULD_BUILD="false"

          if [ "$LATEST_KERNEL_TAG" != "$LAST_KERNEL_TAG" ]; then
            NEW_KERNEL_TAG="true"
            SHOULD_BUILD="true"
            echo "New kernel tag detected: $LATEST_KERNEL_TAG"
          fi

          if [ "$LATEST_KERNELSU_RELEASE" != "$LAST_KERNELSU_RELEASE" ]; then
            NEW_KERNELSU_RELEASE="true"
            SHOULD_BUILD="true"
            echo "New KernelSU release detected: $LATEST_KERNELSU_RELEASE"
          fi

          # Force build if requested manually
          if [ "${{ github.event.inputs.force_build }}" = "true" ]; then
            SHOULD_BUILD="true"
            echo "Force build requested"
          fi

          echo "new-kernel-tag=$NEW_KERNEL_TAG" >> $GITHUB_OUTPUT
          echo "new-kernelsu-release=$NEW_KERNELSU_RELEASE" >> $GITHUB_OUTPUT
          echo "should-build=$SHOULD_BUILD" >> $GITHUB_OUTPUT
          echo "kernel-tag=$LATEST_KERNEL_TAG" >> $GITHUB_OUTPUT
          echo "kernelsu-release=$LATEST_KERNELSU_RELEASE" >> $GITHUB_OUTPUT

  build-kernel:
    needs: check-versions
    if: needs.check-versions.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set script permissions
        run: |
          # Set execution permissions for scripts (since we're on Linux)
          chmod +x scripts/*.sh
          echo "Script permissions set"

      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          df -h

      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            bc \
            bison \
            flex \
            libssl-dev \
            libelf-dev \
            git \
            curl \
            wget \
            zip \
            unzip \
            python3 \
            python3-pip \
            device-tree-compiler \
            cpio \
            rsync \
            ccache \
            fakeroot \
            lz4 \
            mkbootimg \
            android-sdk-platform-tools-common \
            jq

          # Install Python dependencies for mkbootimg.py
          pip3 install --user argparse

          # Install repo tool
          mkdir -p ~/.bin
          PATH="${HOME}/.bin:${PATH}"
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+rx ~/.bin/repo

          # Download and setup Android NDK for clang compiler
          echo "Setting up Android NDK..."
          cd /tmp
          wget -q https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
          if [ $? -ne 0 ]; then
            echo "❌ Failed to download Android NDK r25c"
            echo "Trying alternative NDK version..."
            wget -q https://dl.google.com/android/repository/android-ndk-r24-linux.zip
            unzip -q android-ndk-r24-linux.zip
            sudo mv android-ndk-r24 /opt/android-ndk
          else
            unzip -q android-ndk-r25c-linux.zip
            sudo mv android-ndk-r25c /opt/android-ndk
          fi
          echo "Android NDK installed to /opt/android-ndk"
          ls -la /opt/android-ndk/ | head -5

      - name: Download kernel source
        run: |
          echo "Downloading kernel source with tag: ${{ needs.check-versions.outputs.kernel-tag }}"
          git clone --depth=1 --branch=${{ needs.check-versions.outputs.kernel-tag }} \
            https://github.com/arter97/android_kernel_nothing_sm8475.git kernel_source
          cd kernel_source

          # Verify the tag is correct
          git describe --tags --exact-match HEAD
          echo "Kernel source downloaded successfully"

      - name: Set up Android build tools
        run: |
          cd kernel_source

          # Check if build_kernel.sh exists
          if [ ! -f "build_kernel.sh" ]; then
            echo "Error: build_kernel.sh not found in kernel source"
            ls -la
            exit 1
          fi

          chmod +x build_kernel.sh

          # Setup mkbootimg.py - Use official AOSP version only
          echo "Setting up official AOSP mkbootimg.py..."

          # Check if mkbootimg.py exists in kernel source
          if [ -f "mkbootimg.py" ]; then
            echo "Found mkbootimg.py in kernel source - using it"
            chmod +x mkbootimg.py
          else
            echo "Downloading official AOSP mkbootimg.py..."
            # Download the exact same mkbootimg.py that arter97 kernel expects
            wget -O mkbootimg_base64.txt "https://android.googlesource.com/platform/system/tools/mkbootimg/+/refs/heads/main/mkbootimg.py?format=TEXT"

            if [ $? -eq 0 ]; then
              # Decode from base64 (googlesource returns base64 encoded)
              base64 -d mkbootimg_base64.txt > mkbootimg.py
              rm mkbootimg_base64.txt
              chmod +x mkbootimg.py
              echo "AOSP mkbootimg.py downloaded and configured successfully"
              echo "File size: $(stat -c%s mkbootimg.py) bytes"
              echo "First few lines:"
              head -5 mkbootimg.py
            else
              echo "ERROR: Failed to download mkbootimg.py from AOSP"
              echo "This is required for building Android boot images"
              exit 1
            fi
          fi

          # Verify mkbootimg.py is working
          if [ -f "mkbootimg.py" ] && [ -s "mkbootimg.py" ]; then
            echo "✅ mkbootimg.py downloaded and ready ($(wc -l < mkbootimg.py) lines)"
            # Test basic Python syntax
            python3 -m py_compile mkbootimg.py
            if [ $? -eq 0 ]; then
              echo "✅ mkbootimg.py Python syntax is valid"
            else
              echo "❌ mkbootimg.py has Python syntax errors"
              exit 1
            fi
          else
            echo "❌ mkbootimg.py is missing or empty"
            exit 1
          fi

          # Download toolchain if not included
          if [ ! -d "toolchain" ] && [ ! -d "prebuilts" ]; then
            echo "Setting up toolchain..."
            git clone --depth=1 https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 toolchain
          fi

      - name: Integrate KernelSU Next
        run: |
          cd kernel_source
          echo "Integrating KernelSU Next version: ${{ needs.check-versions.outputs.kernelsu-release }}"

          # Download and integrate KernelSU Next
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -

          # Verify integration was successful
          if [ -d "KernelSU" ]; then
            echo "KernelSU Next integration successful"
            ls -la KernelSU/ | head -5
          elif [ -d "KernelSU-Next" ]; then
            echo "KernelSU Next directory found as KernelSU-Next"
            ls -la KernelSU-Next/ | head -5
          else
            echo "Warning: KernelSU directory not found after integration"
            echo "Available directories:"
            ls -la | grep -i kernel || echo "No kernel-related directories found"
          fi

      - name: Build kernel
        run: |
          cd kernel_source
          echo "Starting kernel compilation..."

          # Configure environment variables for compilation
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-android-

          # Set up Android NDK clang toolchain paths
          export ANDROID_NDK_ROOT=/opt/android-ndk
          export NDK_CLANG_PATH="$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64"

          # Verify NDK installation
          if [ ! -d "$NDK_CLANG_PATH" ]; then
            echo "❌ NDK clang toolchain not found at $NDK_CLANG_PATH"
            echo "Available directories in NDK:"
            find /opt/android-ndk -type d -name "*clang*" -o -name "*llvm*" | head -10
            echo "Trying to find correct path..."
            NDK_CLANG_PATH=$(find /opt/android-ndk -type d -name "prebuilt" | grep linux-x86_64 | head -1)
            if [ -z "$NDK_CLANG_PATH" ]; then
              echo "❌ Could not find NDK toolchain"
              exit 1
            fi
            echo "Found NDK toolchain at: $NDK_CLANG_PATH"
          fi

          export PATH="$NDK_CLANG_PATH/bin:$PATH"

          # Override compiler settings to use Android NDK clang
          export CC="$NDK_CLANG_PATH/bin/clang"
          export CXX="$NDK_CLANG_PATH/bin/clang++"
          export CLANG_TRIPLE=aarch64-linux-android-
          export CROSS_COMPILE_ARM32=arm-linux-androideabi-

          # Additional environment variables to override kernel build system
          export HOSTCC="$NDK_CLANG_PATH/bin/clang"
          export HOSTCXX="$NDK_CLANG_PATH/bin/clang++"
          export LLVM=1
          export LLVM_IAS=1

          # Fix for Clang -ftrivial-auto-var-init=zero error
          export KCFLAGS="-Wno-error=unused-command-line-argument-hard-error-in-future"
          export KAFLAGS="-Wno-error=unused-command-line-argument-hard-error-in-future"

          # Add toolchain to PATH if it exists (fallback)
          if [ -d "toolchain/bin" ]; then
            export PATH="$PWD/toolchain/bin:$PATH"
          fi

          # Make sure all scripts are executable
          chmod +x build_kernel.sh
          if [ -f "ramdisk_fix_permissions.sh" ]; then
            chmod +x ramdisk_fix_permissions.sh
          fi
          if [ -f "mkbootimg.py" ]; then
            chmod +x mkbootimg.py
          fi

          echo "Compiler setup:"
          echo "CC=$CC"
          echo "CXX=$CXX"
          echo "HOSTCC=$HOSTCC"
          echo "CROSS_COMPILE=$CROSS_COMPILE"
          echo "LLVM=$LLVM"
          echo "NDK_CLANG_PATH=$NDK_CLANG_PATH"

          # Verify clang is accessible
          if [ -f "$NDK_CLANG_PATH/bin/clang" ]; then
            echo "✅ clang found at $NDK_CLANG_PATH/bin/clang"
            "$NDK_CLANG_PATH/bin/clang" --version | head -2
          else
            echo "❌ clang not found at expected path"
            echo "Available files in bin directory:"
            ls -la "$NDK_CLANG_PATH/bin/" | head -10
            exit 1
          fi

          # Create symlinks to override hardcoded paths in arter97 kernel
          echo "Creating symlinks for hardcoded paths..."
          sudo mkdir -p /home/arter97/android/nathan/llvm-20.1.8-x86_64/bin

          # Only create symlinks if the source files exist
          for tool in clang clang++ ld.lld llvm-ar llvm-nm llvm-objcopy llvm-objdump llvm-readelf llvm-strip; do
            if [ -f "$NDK_CLANG_PATH/bin/$tool" ]; then
              sudo ln -sf "$NDK_CLANG_PATH/bin/$tool" "/home/arter97/android/nathan/llvm-20.1.8-x86_64/bin/$tool"
              echo "✅ Created symlink for $tool"
            else
              echo "⚠️  Tool $tool not found in NDK, skipping"
            fi
          done

          echo "Created symlinks for hardcoded paths:"
          ls -la /home/arter97/android/nathan/llvm-20.1.8-x86_64/bin/

          # Additional compiler flags to fix Clang issues
          export KBUILD_CFLAGS_KERNEL="-Wno-error=unused-command-line-argument-hard-error-in-future"
          export KBUILD_CFLAGS="-Wno-error=unused-command-line-argument-hard-error-in-future"

          # Execute compilation script
          echo "🚀 Starting kernel compilation..."
          echo "Current directory: $(pwd)"
          echo "Build script exists: $([ -f build_kernel.sh ] && echo "✅ Yes" || echo "❌ No")"

          if ! bash build_kernel.sh; then
            echo "❌ Kernel compilation failed"
            echo "Checking for error logs..."
            find . -name "*.log" -o -name "*error*" | head -10
            echo "Available makefiles and configs:"
            find . -name "Makefile" -o -name "*defconfig" | head -10
            exit 1
          fi

          echo "✅ Kernel compilation completed successfully"

          # Verify generated files
          echo "Generated files:"
          find . -name "*.img" -type f | head -20
          find . -name "*boot*.img" -type f | head -10

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts
          cd kernel_source

          echo "📦 Searching for generated files..."
          echo "All .img files in kernel source:"
          find . -name "*.img" -type f

          echo "All files matching boot pattern:"
          find . -name "*boot*" -type f | head -10

          # Search and copy boot.img files
          find . -name "boot.img" -type f -exec cp {} ../artifacts/ \;
          find . -name "arter97-kernel-*-boot.img" -type f -exec cp {} ../artifacts/ \;

          # If we don't find specific files, search for any .img files
          if [ ! "$(ls -A ../artifacts/)" ]; then
            echo "No boot.img files found, searching for other image files..."
            find . -name "*.img" -type f -exec cp {} ../artifacts/ \;

            # Also look for other potential kernel files
            find . -name "Image" -type f -exec cp {} ../artifacts/ \;
            find . -name "Image.gz" -type f -exec cp {} ../artifacts/ \;
            find . -name "zImage" -type f -exec cp {} ../artifacts/ \;
          fi

          # Create build information
          cd ../artifacts
          echo "Build Information:" > build_info.txt
          echo "Kernel Tag: ${{ needs.check-versions.outputs.kernel-tag }}" >> build_info.txt
          echo "KernelSU Release: ${{ needs.check-versions.outputs.kernelsu-release }}" >> build_info.txt
          echo "Build Date: $(date)" >> build_info.txt
          echo "Build ID: ${{ github.run_number }}" >> build_info.txt

          echo "Artifacts prepared:"
          ls -la

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ needs.check-versions.outputs.kernel-tag }}-kernelsu-${{ needs.check-versions.outputs.kernelsu-release }}
          path: artifacts/
          retention-days: 30

      - name: Create Release
        if: success()
        run: |
          # Create release using GitHub CLI
          RELEASE_TAG="${{ needs.check-versions.outputs.kernelsu-release }}-${{ needs.check-versions.outputs.kernel-tag }}"
          RELEASE_NAME="KernelSU ${{ needs.check-versions.outputs.kernelsu-release }} + Kernel ${{ needs.check-versions.outputs.kernel-tag }}"

          RELEASE_BODY="## Auto-compiled Kernel with KernelSU Next

          **Kernel Source:** arter97/android_kernel_nothing_sm8475@${{ needs.check-versions.outputs.kernel-tag }}
          **KernelSU Version:** ${{ needs.check-versions.outputs.kernelsu-release }}
          **Build Date:** $(date)

          ### Changes
          - New kernel tag: ${{ needs.check-versions.outputs.new-kernel-tag == 'true' && '✅' || '❌' }}
          - New KernelSU release: ${{ needs.check-versions.outputs.new-kernelsu-release == 'true' && '✅' || '❌' }}

          ### Installation
          Flash the \`boot.img\` or \`arter97-kernel-*-boot.img\` file using fastboot or custom recovery.

          **Warning:** This is an automatically compiled kernel. Use at your own risk."

          # Create the release
          gh release create "$RELEASE_TAG" \
            --title "$RELEASE_NAME" \
            --notes "$RELEASE_BODY" \
            --target main \
            artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version tracking
        if: success()
        run: |
          # Update processed versions file
          echo "KERNEL_TAG=${{ needs.check-versions.outputs.kernel-tag }}" > last_versions.txt
          echo "KERNELSU_RELEASE=${{ needs.check-versions.outputs.kernelsu-release }}" >> last_versions.txt
          echo "LAST_BUILD_DATE=$(date)" >> last_versions.txt

          # Commit and push updated file
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add last_versions.txt
          git commit -m "Update last processed versions: K:${{ needs.check-versions.outputs.kernel-tag }} KSU:${{ needs.check-versions.outputs.kernelsu-release }}" || exit 0
          git push

      - name: Cleanup
        if: always()
        run: |
          # Clean temporary files to free up space
          rm -rf kernel_source
          rm -rf artifacts
          df -h
